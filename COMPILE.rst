The theme compiler
******************

The theme compiler is a single python file, ``bin/theme.py``,
that helps in compiling static projects.


Requisites
==========

In order to run the compiler, you need either:

 * Python 2.7
 * or Python 2.6 with ``ordereddict`` and ``argparse``


Optional requirements
---------------------

If you wish to have the compiled HTML tidyed,
you must also install ``html5tidy``.


Basic usage
===========

The system is used to compile theme files: that is,
it enables the designer to include "snippets" of HTML
via the ``@@include`` directive.

This allows the designer to reuse parts of HTML
(think for example of the header and footer)
in multiple static templates without having to duplicate the markup.

The standard structure the compiler expects is as follows
(this can be overridden by using the appropriate options documented below):

source_templates
    The directory containing the templates as written by the designer
templates
    The directory where the compiled templates are put
    (that is, the same files in ``source_templates``,
    with the ``@@include`` directives replaced by the included snippet)
dumped_templates
    The directory where the dumped templates are put (see `Dumping templates`_)
dump.lst
    The file contaning the list of templates to dump (see `Dumping templates`_)


Serving for development
-----------------------

This method will serve the static theme compiled on-the-fly:
this means that each time a template is requested via HTTP,
it is first compiled
(the ``@@include`` directives are replaced by the snippet content).

The basic usage is as follows::

    $ ../bin/theme.py serve

.. note::
   All shell commands in this tutorial suppose
   that you are currently in the theme main directory,
   unless otherwise specified.

This will serve the templates on http://localhost:8000/

It accepts the following options
(in addition to those defined by the compiler,
see `Off line compiling`_ for the full list)

--host=HOSTNAME
    Serves HTTP requests on a ``HOSTNAME``
    different from ``localhost`` (the default).
    To serve on all network interfaces, for example,
    you can do ``bin/theme.py --host=0.0.0.0``

--port=PORT
    Serves HTTP requests on a TCP ``PORT``
    different from ``8000`` (the default).
    To serve on TCP port 80, for example,
    you can do ``bin/theme.py --port=80``

--serve-only
    If given, it does not compile the templates on-the-fly upon serving
    but relies on the compiled template being present in ``templates``
    (or the custom directory defined by ``--compiled-folder``)


Off line compiling
------------------

This operating mode iterated through all the source templates defined,
compiles them, and then exits.

Example usage::

    $ ../bin/theme.py compile

It accepts the following options
(which are also accepted by the ``serve`` command,
see `Serving for development`_).

Within these options, if paths are given as relative,
they are relative to the working directory.

--base-dir=FOLDER
    The ``FOLDER`` where the theme is located
    (the root directory of the theme).
    All other paths (``--source-folder`` and ``--compiled-folder``)
    are considered relative to this path.
    Defaults to the current working directory.

--source-folder=FOLDER
    The ``FOLDER`` where the static source templates
    (i.e. those with ``@@include`` directives,
    and the ones edited by the designers) are located
    (defaults to ``source_templates``)

--compiled-folder=FOLDER
    The ``FOLDER`` where the compiled static templates
    (i.e. the source template counterparts
    with ``@@include`` directives replaced by the snippet content) are located
    (defaults to ``templates``)

--verbose
    If given, enables verbose output
    (the name of the templates being compiled, along with their destination,
    are printed to standard output)

--compile-less
    If given, any LESS file referenced by the templates being compiled
    is also compiled.

--nodejs-bin=PATH
    The name or the full ``PATH`` of the `node.js`_ executable,
    needed to compile LESS files (defaults to ``node``).
    The passed ``PATH`` will first be searched in ``$PATH``
    like it was an executable name,
    and the looked up flatly as a relative or absolute path.
    For example, if your node binary resides at ``/usr/bin/nodejs``
    you can use either ``--nodejs-bin=nodejs`` or
    ``--nodejs-bin=/usr/bin/nodejs``.

--lessc-bin=PATH
    The ``PATH`` of the ``lessc`` javascript binary
    (defaults to ``../shared/less/less.js/bin/lessc``).


Dumping templates
-----------------

Sometimes it is necessary to provide the designers
with the markup generated by the backend in order to drive their work,
or to allow them to compare their output with the final system output
to spot inconsistencies.

This is when "template dumping" comes into play.

This mode of operations will read a file, the dumping list,
which lists several URLs and dump them, a la ``wget``,
in the ``dumped_templates`` folder.

The first thing is writing the URL list.

This list resides in the ``dump.lst`` file,
and is a standard INI file with a section named ``[urls]``.
Within this section,
each key represents the name of the file where the URL has to be dumped,
and the value the URL that has to be dumped.

An example of ``dump.lst`` could be::

    [urls]
    foo.html = http://example.com/foo
    bar.html = http://example.com/bar

After executing::

    $ bin/theme.py dump

We would have the following files in ``dumped_templates``:

    * ``foo.html`` containing the contents of ``http://example.com/foo``
    * ``bar.html`` containing the contents of ``http://example.com/bar``

The dump list also takes an optional ``[DEFAULT]`` section
that might contain two keys, ``user`` and ``password``.
These are used to access the passed URLs with *HTTP Basic Authentication*
(in addition to a first, *anonymous* retrieve)
and then save the resulting response as ``<dump_file>.authenticated``.

Therefore, if the ``dump.lst`` file is::

    [DEFAULT]
    user = johndoe
    password = secret

    [urls]
    foo.html = http://example.com/foo
    bar.html = http://example.com/bar

A run of the dumper will give us the following files:

    * ``foo.html`` containing the contents of ``http://example.com/foo``
      accessed without authentication
    * ``foo.html.authenticated`` containing the contents of
      ``http://example.com/foo`` accessed with *HTTP Basic Authentication*
    * ``bar.html`` containing the contents of ``http://example.com/bar``
      accessed without authentication
    * ``bar.html.authenticated`` containing the contents of
      ``http://example.com/bar`` accessed with *HTTP Basic Authentication*

The dumper takes the following options:

--base-dir=FOLDER
    The ``FOLDER`` where the theme is located
    (the root directory of the theme).
    All other paths (``--dump-folder`` and ``--dump-list``)
    are considered relative to this path.
    Defaults to the current working directory.

--dump-folder=FOLDER
    The ``FOLDER`` where to put the dumped files
    (defaults to ``dumped_templates``)

--dump-list=FILE
    The INI ``FILE`` that contains the list of URLs to dump (dump list).
    (defaults to ``dump.lst``)


Advanced usage
==============

Serving via WSGI
----------------

If you wish to serve it in a Paster_ pipeline, you can do::

    [theme]
    paste.app_factory = theme:Application

Supposing that ``theme.py`` is importable by Paster_.

If you wish to set options, you can do so directly in the INI files:
the option names are the same as the command-line option names,
with the ``--`` prefix dropped and ``-`` substituted by ``_``.

For example::

    [theme]
    paste.app_factory = theme:Application
    snippets_folder = foo
    source_folder = bar
    compiled_folder = /tmp/spam

If you wish to serve the WSGI application object directly, do::

    >>> from theme import Application
    >>> application = Application()

And ``application`` will be the WSGI application as understood
by any WSGI server.

Note that the constructor of ``Application``
takes as keyword arguments the options as expressed for the Paster_ pipeline.


.. _`node.js`: http://nodejs.org
.. _Paster: http://pythonpaste.org
